@page "/"
@using MauiApp3.Models
@using MauiApp3.Services
@using Firebase.Database
@using Firebase.Database.Query
@inject MauiApp3.Services.ApiService Api
@inject NavigationManager Navigation
@inject AuthService Auth


<style>
    body {
        font-family: 'Arial', sans-serif;
        background-image: url('../Images/background.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        background-repeat: no-repeat;
        color: #333;
    }

    h2 {
        text-align: center;
        font-size: 2rem;
        margin-bottom: 20px;
        color: #444;
    }

    .events-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .event-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        overflow: hidden;
        width: 340px;
    }

        .event-card:hover {
            box-shadow: 0 10px 18px rgba(0, 0, 0, 0.25);
        }

        .event-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

    .event-content {
        padding: 20px;
        text-align: center;
    }

        .event-content h3 {
            margin-top: 0;
            font-size: 1.5rem;
            color: #222;
        }

        .event-content p {
            margin: 5px 0;
            color: #555;
            font-size: 1rem;
        }

        .event-content .date,
        .event-content .location {
            font-weight: bold;
            color: #444;
        }

        .event-content .btn {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 15px;
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            color: white;
            font-size: 1rem;
            font-weight: bold;
            border-radius: 20px;
            text-decoration: none;
            position: relative;
            cursor: pointer;
            border: none;
        }

            .event-content .btn:hover {
                background: linear-gradient(135deg, #ff6b4f, #ffa269);
            }

    .add-event-btn {
        display: inline-block;
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        font-size: 1rem;
        font-weight: bold;
        border-radius: 20px;
        text-decoration: none;
        border: none;
        cursor: pointer;
    }

        .add-event-btn:hover {
            background-color: #0056b3;
        }

    .modal {
        display: @((showModalForAdding) ? "block" : "none");
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        width: 80%;
        max-width: 500px;
    }

    .close-btn {
        background-color: #ff6b6b;
        border: none;
        color: white;
        font-size: 1rem;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
    }

        .close-btn:hover {
            background-color: #ff4c4c;
        }
</style>

<h2 class="text-black">Események</h2>

<div style="text-align: center;">
    <button class="add-event-btn" @onclick="ShowAddEventModal">Új esemény hozzáadása</button>
</div>
@if (Auth.IsLoggedIn)
{
    <p>Bejelentkezett: @Auth.CurrentUser!.Name</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger text-center">@errorMessage</p>
}
else if (esemenyek == null)
{
    <p class="text-center">Betöltés...</p>
}
else if (!esemenyek.Any())
{
    <p class="text-center">Nincs megjeleníthető esemény.</p>
}
else
{
    <div class="events-container">
        @foreach (var esemeny in esemenyek)
        {
            <div class="event-card">
                <div class="event-content">
                    <h3>@esemeny.Cime</h3>
                    <picture>
                        <img src="@($"{esemeny.Kepurl}")" alt="" title="@($"{esemeny.Kepurl}")" />
                    </picture>
                    <p class="date">@esemeny.Datum.ToString("yyyy.MM.dd HH:mm")</p>
                    <p class="location">@esemeny.Helyszin</p>
                    <button class="btn" @onclick="() => ShowModal(esemeny)">További információ</button>
                    <button class="btn btn-primary" @onclick="() => SaveEvent(esemeny)">Mentés</button>
                </div>
            </div>
        }
    </div>
}

@if (selectedEsemeny != null)
{
    <div class="modal show">
        <div class="modal-content">
            <h3>@selectedEsemeny.Cime</h3>
            <p>@selectedEsemeny.Leiras</p>
            <button class="close-btn" @onclick="CloseModal">Bezárás</button>
        </div>
    </div>
}

@if (showModalForAdding)
{
    <div class="modal show">
        <div class="modal-content">
            <h3>Esemény hozzáadása</h3>
            <input type="text" @bind="newEvent.Cime" placeholder="Esemény címe" class="form-control" />
            <input type="text" @bind="newEvent.Helyszin" placeholder="Helyszín" class="form-control" />
            <input type="datetime-local" @bind="newEvent.Datum" class="form-control" />
            <textarea @bind="newEvent.Leiras" placeholder="Esemény leírása" class="form-control"></textarea>

            <div style="text-align:center;">
                <button @onclick="HandleAddEvent" class="btn btn-secondary">Hozzáadás</button>
            </div>

            <button class="close-btn" @onclick="CloseAddEventModal">Bezárás</button>
        </div>
    </div>
}

@code {
    private List<Esemeny>? esemenyek;
    private string errorMessage = string.Empty;
    private Esemeny? selectedEsemeny;
    private string userToken = "";
    private bool showModalForAdding = false;
    private EventModel newEvent = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userToken = await SecureStorage.GetAsync("auth_token");
            esemenyek = await Api.GetEsemenyekAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void ShowModal(Esemeny esemeny)
    {
        selectedEsemeny = esemeny;
    }

    private void CloseModal()
    {
        selectedEsemeny = null;
    }

    private async Task SaveEvent(Esemeny esemeny)
    {
        try
        {
            if (string.IsNullOrEmpty(userToken))
            {
                errorMessage = "Nincs bejelentkezett felhasználó.";
                return;
            }

            await Api.SaveEsemenyAsync(esemeny, userToken);
            Navigation.NavigateTo("/saved");
        }
        catch (Exception ex)
        {
            errorMessage = "Hiba a mentés során: " + ex.Message;
        }
    }

    private void ShowAddEventModal()
    {
        showModalForAdding = true;
    }

    private void CloseAddEventModal()
    {
        showModalForAdding = false;
    }

    private async Task HandleAddEvent()
    {
        if (string.IsNullOrWhiteSpace(newEvent.Cime) || string.IsNullOrWhiteSpace(newEvent.Helyszin))
        {
            errorMessage = "Minden mezőt ki kell tölteni, kivéve az esemény leírását!";
            return;
        }

        newEvent.EsemenyID = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();

        // ⬇️ Itt add meg a FirebaseClient-et autentikált tokennel
        var firebase = new FirebaseClient(
            "https://esemenyrendezo-71f5b-default-rtdb.europe-west1.firebasedatabase.app/",
            new FirebaseOptions
                {
                    AuthTokenAsyncFactory = () => Task.FromResult(userToken)
                });

        var eventToSend = new
        {
            EsemenyID = newEvent.EsemenyID,
            Cime = newEvent.Cime,
            Helyszin = newEvent.Helyszin,
            Datum = newEvent.Datum.ToString("yyyy-MM-ddTHH:mm:ss"),
            Leiras = newEvent.Leiras,
            Kepurl = newEvent.Kepurl
        };

        var result = await firebase
            .Child("events")
            .PostAsync(eventToSend);

        if (result != null)
        {
            newEvent = new EventModel();
            errorMessage = string.Empty;
            CloseAddEventModal();
        }
        else
        {
            errorMessage = "Hiba történt az esemény hozzáadása során.";
        }
    }

}
